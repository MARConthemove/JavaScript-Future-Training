"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntervalTimer = IntervalTimer;
exports.targetValue = targetValue;
exports.ifEnter = ifEnter;

// Various helpful utility functions that become available right
// on the Zodiac object.

// More convenient dom timer syntax. Uses a regular timer.
function ZIntervalTimer(interval, callback) {
  var timer = window.setInterval(callback, interval);
  return {
    stop: function stop() {
      window.clearInterval(timer);
    }
  };
}

function IntervalTimer() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new (Function.prototype.bind.apply(ZIntervalTimer, [null].concat(args)))();
}

// Experimental: Wrap an event callback to receive the target value.
function targetValue(fn) {
  return function (ev) {
    fn(ev.target.value);
  };
}

// Experimental: Wrap an event callback to only receive enter presses.
function ifEnter(fn) {
  return function (ev) {
    if (ev.keyCode === 13) fn(ev);
  };
}